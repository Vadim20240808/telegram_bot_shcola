import os
import logging
import requests
import pandas as pd
import joblib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from PIL import Image
import pytesseract

# –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ Tesseract
pytesseract.pytesseract.tesseract_cmd = '—É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ Tesseract'
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ DeepSeek API
DEEPSEEK_API_URL = "API_URL"
API_KEY = "–í–ê–® API_KEY"
PROMPT_PATH = "promt/promt_1.txt"
TOKEN = "–í–ê–® –¢–û–ö–ï–ù"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class SubjectClassifier:
    def __init__(self):
        self.keyword_db = self._init_keyword_db()
        self.ml_model = self._init_ml_model()

    def _init_keyword_db(self):
        """–ë–∞–∑–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        return {
            '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞': ['–∑–∞–¥–∞—á–∞', '—É—Ä–∞–≤–Ω–µ–Ω–∏–µ', '—Ç–µ–æ—Ä–µ–º–∞', '–∏–Ω—Ç–µ–≥—Ä–∞–ª', '–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è', '–≥–µ–æ–º–µ—Ç—Ä–∏—è', '–∞–ª–≥–µ–±—Ä–∞'],
            '—Ñ–∏–∑–∏–∫–∞': ['—Å–∫–æ—Ä–æ—Å—Ç—å', '—Å–∏–ª–∞', '—ç–Ω–µ—Ä–≥–∏—è', '–∑–∞–∫–æ–Ω', '—É—Å–∫–æ—Ä–µ–Ω–∏–µ', '–º–∞—è—Ç–Ω–∏–∫', '–∫–≤–∞–Ω—Ç'],
            '—Ö–∏–º–∏—è': ['—Ä–µ–∞–∫—Ü–∏—è', '–º–æ–ª–µ–∫—É–ª–∞', '—ç–ª–µ–º–µ–Ω—Ç', '—Ñ–æ—Ä–º—É–ª–∞', '–≤–µ—â–µ—Å—Ç–≤–æ', '–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å', '–æ–∫—Å–∏–¥'],
            '–±–∏–æ–ª–æ–≥–∏—è': ['–∫–ª–µ—Ç–∫–∞', '–æ—Ä–≥–∞–Ω–∏–∑–º', '–≥–µ–Ω', '–≤–∏–¥', '—ç–≤–æ–ª—é—Ü–∏—è', '—Ñ–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑', '–î–ù–ö'],
            '–∏—Å—Ç–æ—Ä–∏—è': ['–≤–æ–π–Ω–∞', '–≥–æ–¥', '–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π', '—Å–æ–±—ã—Ç–∏–µ', '–¥–∞—Ç–∞', '–∏–º–ø–µ—Ä–∏—è', '—Ä–µ–≤–æ–ª—é—Ü–∏—è'],
            '–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞': ['–∞–≤—Ç–æ—Ä', '–∫–Ω–∏–≥–∞', '–ø–µ—Ä—Å–æ–Ω–∞–∂', '—Ä–æ–º–∞–Ω', '–ø–æ—ç–º–∞', '—Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ', '—Å—é–∂–µ—Ç'],
            '–≥–µ–æ–≥—Ä–∞—Ñ–∏—è': ['—Å—Ç—Ä–∞–Ω–∞', '—Å—Ç–æ–ª–∏—Ü–∞', '–∫–∞—Ä—Ç–∞', '–º–∞—Ç–µ—Ä–∏–∫', '–æ–∫–µ–∞–Ω', '—Ä–µ–∫–∞', '–∫–ª–∏–º–∞—Ç']
        }

    def _init_ml_model(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML-–º–æ–¥–µ–ª–∏"""
        model_path = "subject_classifier.joblib"

        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞—Ç–∞—Å–µ—Ç –µ—Å–ª–∏ –Ω–µ—Ç –º–æ–¥–µ–ª–∏
        if not os.path.exists(model_path):
            self._create_demo_dataset()
            return self._train_model()

        return joblib.load(model_path)

    def _create_demo_dataset(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        data = {
            'text': [
                "–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x¬≤ - 5x + 6 = 0",
                "–ö—Ç–æ –∞–≤—Ç–æ—Ä '–í–æ–π–Ω—ã –∏ –º–∏—Ä–∞'?",
                "–í –∫–∞–∫–æ–º –≥–æ–¥—É –Ω–∞—á–∞–ª–∞—Å—å –í—Ç–æ—Ä–∞—è –º–∏—Ä–æ–≤–∞—è –≤–æ–π–Ω–∞?",
                "–ö–∞–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞ —Å–µ—Ä–Ω–æ–π –∫–∏—Å–ª–æ—Ç—ã?",
                "–°–∫–æ–ª—å–∫–æ —Ö—Ä–æ–º–æ—Å–æ–º —É —á–µ–ª–æ–≤–µ–∫–∞?",
                "–ß–µ–º—É —Ä–∞–≤–Ω–æ —É—Å–∫–æ—Ä–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è?",
                "–ö–∞–∫–∞—è —Å–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Ä–µ–∫–∞ –≤ –º–∏—Ä–µ?"
            ],
            'subject': [
                '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', '–∏—Å—Ç–æ—Ä–∏—è',
                '—Ö–∏–º–∏—è', '–±–∏–æ–ª–æ–≥–∏—è', '—Ñ–∏–∑–∏–∫–∞', '–≥–µ–æ–≥—Ä–∞—Ñ–∏—è'
            ]
        }
        pd.DataFrame(data).to_csv("subjects_dataset.csv", index=False)

    def _train_model(self):
        """–û–±—É—á–µ–Ω–∏–µ ML-–º–æ–¥–µ–ª–∏"""
        df = pd.read_csv("subjects_dataset.csv")
        model = make_pipeline(
            TfidfVectorizer(),
            MultinomialNB()
        )
        model.fit(df['text'], df['subject'])
        joblib.dump(model, "subject_classifier.joblib")
        return model

    def classify_with_keywords(self, text: str) -> str:
        """–ë—ã—Å—Ç—Ä–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        text_lower = text.lower()
        for subject, keywords in self.keyword_db.items():
            if any(kw in text_lower for kw in keywords):
                return subject
        return ""

    def classify_with_ml(self, text: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é ML-–º–æ–¥–µ–ª–∏"""
        return self.ml_model.predict([text])[0]

    def classify_with_deepseek(self, text: str) -> str:
        """–ì–ª—É–±–æ–∫–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ DeepSeek"""
        prompt = (
            "–û–ø—Ä–µ–¥–µ–ª–∏ —à–∫–æ–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –ø–æ –≤–æ–ø—Ä–æ—Å—É. –í—ã–±–µ—Ä–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑: "
            "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, —Ñ–∏–∑–∏–∫–∞, —Ö–∏–º–∏—è, –±–∏–æ–ª–æ–≥–∏—è, –∏—Å—Ç–æ—Ä–∏—è, –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞, –≥–µ–æ–≥—Ä–∞—Ñ–∏—è. "
            f"–í–æ–ø—Ä–æ—Å: {text}\n–û—Ç–≤–µ—Ç:"
        )
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞
        return self.ask_deepseek_simple(prompt)

    def detect_subject(self, text: str) -> str:
        """–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        # 1. –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        fast_result = self.classify_with_keywords(text)
        if fast_result:
            return fast_result

        # 2. ML-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
        ml_result = self.classify_with_ml(text)

        # 3. –ï—Å–ª–∏ ML —É–≤–µ—Ä–µ–Ω –º–µ–Ω–µ–µ —á–µ–º –Ω–∞ 70%, –∏—Å–ø–æ–ª—å–∑—É–µ–º DeepSeek
        proba = self.ml_model.predict_proba([text])[0].max()
        if proba < 0.7:
            return self.classify_with_deepseek(text)

        return ml_result

    def ask_deepseek_simple(self, prompt: str) -> str:
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ DeepSeek API"""
        headers = {
            "Authorization": f"Bearer {API_KEY}",
            "Content-Type": "application/json"
        }
        data = {
            "model": "deepseek-chat",
            "messages": [{"role": "user", "content": prompt}],
            "temperature": 0.3,
            "max_tokens": 200,
            "top_p": 1,
            "stream": False
        }

        try:
            response = requests.post(
                DEEPSEEK_API_URL,
                json=data,
                headers=headers,
                timeout=30
            )

            if response.status_code != 200:
                return ""

            result = response.json()
            if 'choices' not in result or len(result['choices']) == 0:
                return ""

            return result['choices'][0]['message']['content'].strip()
        except:
            return ""


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
subject_classifier = SubjectClassifier()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ —Å –∑–∞–¥–∞—á–µ–π, –∏ —è –ø–æ–º–æ–≥—É –µ—ë —Ä–µ—à–∏—Ç—å —Å –ø–æ–º–æ—â—å—é DeepSeek."
    )


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text
        await update.message.reply_text(f"üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç
        subject = subject_classifier.detect_subject(text)
        logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: {subject}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º—Ç —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–º–µ—Ç–∞
        prompt = (f"–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ {subject}. –î–∞–π —Ç–æ—á–Ω—ã–π –∏ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç. "
                  f"–í–æ–ø—Ä–æ—Å: {text}\n–û—Ç–≤–µ—Ç:")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ DeepSeek
        response = ask_deepseek(prompt, subject)
        await update.message.reply_text(
            f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject.capitalize()}\n\n{response}"
        )

    except Exception as e:
        logger.error(f"Text processing error: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞.")


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text("üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        photo_file = await update.message.photo[-1].get_file()
        photo_path = f"temp_photo_{update.message.message_id}.jpg"
        await photo_file.download_to_drive(photo_path)

        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
        text = recognize_text(photo_path)
        os.remove(photo_path)

        if not text.strip():
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç
        subject = subject_classifier.detect_subject(text)
        logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: {subject}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º—Ç —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–º–µ—Ç–∞
        prompt = (f"–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ {subject}. –î–∞–π —Ç–æ—á–Ω—ã–π –∏ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç. "
                  f"–í–æ–ø—Ä–æ—Å: {text}\n–û—Ç–≤–µ—Ç:")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ DeepSeek
        response = ask_deepseek(prompt, subject)
        await update.message.reply_text(
            f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject.capitalize()}\n\n{response}"
        )

    except Exception as e:
        logger.error(f"Error: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")


def recognize_text(image_path: str) -> str:
    try:
        img = Image.open(image_path)
        img = img.convert('L')
        img = img.point(lambda x: 0 if x < 140 else 255)

        return pytesseract.image_to_string(
            img,
            lang='rus+eng',
            config='--psm 6 --oem 3'
        )
    except Exception as e:
        logger.error(f"OCR Error: {e}")
        return ""


def ask_deepseek(prompt: str, subject: str = None) -> str:
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if subject:
            prompt_file = f"prompts/{subject}.txt"
            if os.path.exists(prompt_file):
                with open(prompt_file, 'r', encoding='utf-8') as f:
                    system_prompt = f.read()
                messages = [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": prompt}
                ]
            else:
                messages = [{"role": "user", "content": prompt}]
        else:
            messages = [{"role": "user", "content": prompt}]

        headers = {
            "Authorization": f"Bearer {API_KEY}",
            "Content-Type": "application/json"
        }
        data = {
            "model": "deepseek-chat",
            "messages": messages,
            "temperature": 0.3,
            "max_tokens": 2000,
            "frequency_penalty": 0,
            "presence_penalty": 0,
            "top_p": 1,
            "stop": None,
            "stream": False
        }

        response = requests.post(
            DEEPSEEK_API_URL,
            json=data,
            headers=headers,
            timeout=60
        )

        if response.status_code != 200:
            error_msg = f"DeepSeek API error: {response.status_code} - {response.text}"
            logger.error(error_msg)
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–∏—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        result = response.json()
        if 'choices' not in result or len(result['choices']) == 0:
            logger.error(f"Invalid DeepSeek response: {result}")
            return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek."

        return result['choices'][0]['message']['content'].strip()

    except Exception as e:
        logger.error(f"DeepSeek API Error: {e}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    try:
        import sklearn
    except ImportError:
        logger.info("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º scikit-learn...")
        import subprocess

        subprocess.run(["pip", "install", "scikit-learn", "pandas", "joblib"])
        import sklearn

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–æ–º—Ç–æ–≤ –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    prompt_dir = os.path.dirname(PROMPT_PATH)
    if prompt_dir and not os.path.exists(prompt_dir):
        os.makedirs(prompt_dir)

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–Ω—ã—Ö –ø—Ä–æ–º—Ç–æ–≤
    prompts_subj_dir = "prompts"
    if not os.path.exists(prompts_subj_dir):
        os.makedirs(prompts_subj_dir)

    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–æ–º—Ç–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not os.path.exists(PROMPT_PATH):
        with open(PROMPT_PATH, "w", encoding="utf-8") as f:
            f.write("–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —É—á–µ–±–Ω—ã—Ö –∑–∞–¥–∞—á. –û—Ç–≤–µ—á–∞–π —Ç–æ—á–Ω–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É.")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç–Ω—ã–µ –ø—Ä–æ–º—Ç—ã (–ø—Ä–∏–º–µ—Ä –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏)
    math_prompt_path = os.path.join(prompts_subj_dir, "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞.txt")
    if not os.path.exists(math_prompt_path):
        with open(math_prompt_path, "w", encoding="utf-8") as f:
            f.write("–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ. –†–µ—à–∞–π –∑–∞–¥–∞—á–∏ —à–∞–≥ –∑–∞ —à–∞–≥–æ–º, –æ–±—ä—è—Å–Ω—è–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ.")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º—Ç –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    history_prompt_path = os.path.join(prompts_subj_dir, "–∏—Å—Ç–æ—Ä–∏—è.txt")
    if not os.path.exists(history_prompt_path):
        with open(history_prompt_path, "w", encoding="utf-8") as f:
            f.write("–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏—Å—Ç–æ—Ä–∏–∏. –î–∞–≤–∞–π —Ç–æ—á–Ω—ã–µ —Ñ–∞–∫—Ç—ã —Å –¥–∞—Ç–∞–º–∏ –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º.")

    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤...

    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT, handle_text))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()